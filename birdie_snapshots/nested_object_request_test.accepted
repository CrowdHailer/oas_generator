---
version: 1.3.0
title: nested_object_request_test
file: ./test/oas/generator/operations_test.gleam
test_name: nested_object_request_test
---
import gleam/dict
import gleam/bool
import gleam/result
import gleam/dynamic/decode
import gleam/json
import gleam/float
import gleam/int
import gleam/http/response
import gleam/http
import myservice/schema
import oas/generator/utils
import gleam/option.{type Option, None}

pub type Internal0 {
  Internal0(flavour: schema.Flavour, id: Int)
}

pub fn set_params_request(base, data) {
  let method = http.Post
  let path = "/params"
  let query = []
  let body = utils.json_to_bits(json.array(data, internal_0_encode))
  base |> utils.set_method(method) |> utils.append_path(path) |> utils.set_query(
    query,
  ) |> utils.set_body("application/json", body)
}

pub fn set_params_response(response) {
  let response.Response(status:, ..) = response
  case status {
    204 -> Ok(Nil) |> Ok
    _ -> response |> Error |> Ok
  }
}

pub fn internal_0_decoder() {
  use flavour <- decode.field("flavour", schema.flavour_decoder())
  use id <- decode.field("id", decode.int)
  decode.success(Internal0(flavour: flavour, id: id))
}

pub fn internal_0_encode(data: Internal0) {
  utils.object(
    [
      #("flavour", schema.flavour_encode(data.flavour)),
      #("id", json.int(data.id))
    ],
  )
}
